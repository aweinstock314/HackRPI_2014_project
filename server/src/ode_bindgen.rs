#![allow(dead_code, non_camel_case_types, non_upper_case_globals, non_snake_case, raw_pointer_derive)] // disable warnings for the auto-generated C bindings
/* automatically generated by rust-bindgen */
/* also manually tweaked (__builtin_va_list, and dAllocateMaskAll) */

pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __swblk_t = ::libc::c_long;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __ssize_t = ::libc::c_long;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Union_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Struct_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type _G_int16_t = ::libc::c_short;
pub type _G_int32_t = ::libc::c_int;
pub type _G_uint16_t = ::libc::c_ushort;
pub type _G_uint32_t = ::libc::c_uint;
//pub type va_list = __gnuc_va_list;
//pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = ();
pub type __gnuc_va_list = ();
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Struct__IO_marker { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Struct__IO_FILE { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed6 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed7 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Union_wait { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed6 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Union_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed8;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed9 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Struct_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed9;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed10 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Struct_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed10;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed11 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Struct_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed11;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed12 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Struct_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed12;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: ::libc::c_long,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Struct_timespec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Struct_timeval { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed13 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Struct_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed13;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed14 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Union_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_Unnamed14;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Struct___pthread_internal_list {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Union_Unnamed15 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_int,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Struct___pthread_mutex_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed15;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed16 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Union_Unnamed16 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed16;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed17 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed18 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Union_Unnamed17 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed18 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Struct_Unnamed18 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed17;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Union_Unnamed19 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed19;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed21 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Union_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_Unnamed21 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Struct_Unnamed21 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed20;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed22 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed22 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed22 {
    fn default() -> Union_Unnamed22 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed22;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed23 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed23 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed23 {
    fn default() -> Union_Unnamed23 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed23;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed24 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Union_Unnamed24 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed24;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Struct_random_data { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Struct_drand48_data { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void,
                                        arg2: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type float_t = ::libc::c_float;
pub type double_t = ::libc::c_double;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const FP_NAN: ::libc::c_uint = 0;
pub const FP_INFINITE: ::libc::c_uint = 1;
pub const FP_ZERO: ::libc::c_uint = 2;
pub const FP_SUBNORMAL: ::libc::c_uint = 3;
pub const FP_NORMAL: ::libc::c_uint = 4;
pub type Enum_Unnamed26 = ::libc::c_int;
pub const _IEEE_: ::libc::c_int = -1;
pub const _SVID_: ::libc::c_int = 0;
pub const _XOPEN_: ::libc::c_int = 1;
pub const _POSIX_: ::libc::c_int = 2;
pub const _ISOC_: ::libc::c_int = 3;
pub type _LIB_VERSION_TYPE = Enum_Unnamed26;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_exception {
    pub _type: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub arg1: ::libc::c_double,
    pub arg2: ::libc::c_double,
    pub retval: ::libc::c_double,
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Struct_exception { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Struct___locale_struct { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type int32 = ::libc::c_int;
pub type uint32 = ::libc::c_uint;
pub type int16 = ::libc::c_short;
pub type uint16 = ::libc::c_ushort;
pub type int8 = ::libc::c_char;
pub type uint8 = ::libc::c_uchar;
pub type dMessageFunction =
    extern "C" fn(errnum: ::libc::c_int, msg: *const ::libc::c_char,
                  ap: va_list) -> ();
pub type dReal = ::libc::c_float;
pub type dTriIndex = uint32;
pub type dVector3 = [dReal; 4usize];
pub type dVector4 = [dReal; 4usize];
pub type dMatrix3 = [dReal; 12usize];
pub type dMatrix4 = [dReal; 16usize];
pub type dMatrix6 = [dReal; 48usize];
pub type dQuaternion = [dReal; 4usize];
pub enum Struct_dxWorld { }
pub enum Struct_dxSpace { }
pub enum Struct_dxBody { }
pub enum Struct_dxGeom { }
pub enum Struct_dxJoint { }
pub enum Struct_dxJointNode { }
pub enum Struct_dxJointGroup { }
pub type dWorldID = *mut Struct_dxWorld;
pub type dSpaceID = *mut Struct_dxSpace;
pub type dBodyID = *mut Struct_dxBody;
pub type dGeomID = *mut Struct_dxGeom;
pub type dJointID = *mut Struct_dxJoint;
pub type dJointGroupID = *mut Struct_dxJointGroup;
pub type Enum_Unnamed27 = ::libc::c_uint;
pub const d_ERR_UNKNOWN: ::libc::c_uint = 0;
pub const d_ERR_IASSERT: ::libc::c_uint = 1;
pub const d_ERR_UASSERT: ::libc::c_uint = 2;
pub const d_ERR_LCP: ::libc::c_uint = 3;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const dJointTypeNone: ::libc::c_uint = 0;
pub const dJointTypeBall: ::libc::c_uint = 1;
pub const dJointTypeHinge: ::libc::c_uint = 2;
pub const dJointTypeSlider: ::libc::c_uint = 3;
pub const dJointTypeContact: ::libc::c_uint = 4;
pub const dJointTypeUniversal: ::libc::c_uint = 5;
pub const dJointTypeHinge2: ::libc::c_uint = 6;
pub const dJointTypeFixed: ::libc::c_uint = 7;
pub const dJointTypeNull: ::libc::c_uint = 8;
pub const dJointTypeAMotor: ::libc::c_uint = 9;
pub const dJointTypeLMotor: ::libc::c_uint = 10;
pub const dJointTypePlane2D: ::libc::c_uint = 11;
pub const dJointTypePR: ::libc::c_uint = 12;
pub const dJointTypePU: ::libc::c_uint = 13;
pub const dJointTypePiston: ::libc::c_uint = 14;
pub type dJointType = Enum_Unnamed28;
pub type Enum_Unnamed29 = ::libc::c_uint;
pub const dParamLoStop: ::libc::c_uint = 0;
pub const dParamHiStop: ::libc::c_uint = 1;
pub const dParamVel: ::libc::c_uint = 2;
pub const dParamFMax: ::libc::c_uint = 3;
pub const dParamFudgeFactor: ::libc::c_uint = 4;
pub const dParamBounce: ::libc::c_uint = 5;
pub const dParamCFM: ::libc::c_uint = 6;
pub const dParamStopERP: ::libc::c_uint = 7;
pub const dParamStopCFM: ::libc::c_uint = 8;
pub const dParamSuspensionERP: ::libc::c_uint = 9;
pub const dParamSuspensionCFM: ::libc::c_uint = 10;
pub const dParamERP: ::libc::c_uint = 11;
pub const dParamsInGroup: ::libc::c_uint = 12;
pub const dParamGroup1: ::libc::c_uint = 0;
pub const dParamLoStop1: ::libc::c_uint = 0;
pub const dParamHiStop1: ::libc::c_uint = 1;
pub const dParamVel1: ::libc::c_uint = 2;
pub const dParamFMax1: ::libc::c_uint = 3;
pub const dParamFudgeFactor1: ::libc::c_uint = 4;
pub const dParamBounce1: ::libc::c_uint = 5;
pub const dParamCFM1: ::libc::c_uint = 6;
pub const dParamStopERP1: ::libc::c_uint = 7;
pub const dParamStopCFM1: ::libc::c_uint = 8;
pub const dParamSuspensionERP1: ::libc::c_uint = 9;
pub const dParamSuspensionCFM1: ::libc::c_uint = 10;
pub const dParamERP1: ::libc::c_uint = 11;
pub const dParamGroup2: ::libc::c_uint = 256;
pub const dParamLoStop2: ::libc::c_uint = 256;
pub const dParamHiStop2: ::libc::c_uint = 257;
pub const dParamVel2: ::libc::c_uint = 258;
pub const dParamFMax2: ::libc::c_uint = 259;
pub const dParamFudgeFactor2: ::libc::c_uint = 260;
pub const dParamBounce2: ::libc::c_uint = 261;
pub const dParamCFM2: ::libc::c_uint = 262;
pub const dParamStopERP2: ::libc::c_uint = 263;
pub const dParamStopCFM2: ::libc::c_uint = 264;
pub const dParamSuspensionERP2: ::libc::c_uint = 265;
pub const dParamSuspensionCFM2: ::libc::c_uint = 266;
pub const dParamERP2: ::libc::c_uint = 267;
pub const dParamGroup3: ::libc::c_uint = 512;
pub const dParamLoStop3: ::libc::c_uint = 512;
pub const dParamHiStop3: ::libc::c_uint = 513;
pub const dParamVel3: ::libc::c_uint = 514;
pub const dParamFMax3: ::libc::c_uint = 515;
pub const dParamFudgeFactor3: ::libc::c_uint = 516;
pub const dParamBounce3: ::libc::c_uint = 517;
pub const dParamCFM3: ::libc::c_uint = 518;
pub const dParamStopERP3: ::libc::c_uint = 519;
pub const dParamStopCFM3: ::libc::c_uint = 520;
pub const dParamSuspensionERP3: ::libc::c_uint = 521;
pub const dParamSuspensionCFM3: ::libc::c_uint = 522;
pub const dParamERP3: ::libc::c_uint = 523;
pub const dParamGroup: ::libc::c_uint = 256;
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const dAMotorUser: ::libc::c_uint = 0;
pub const dAMotorEuler: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dJointFeedback {
    pub f1: dVector3,
    pub t1: dVector3,
    pub f2: dVector3,
    pub t2: dVector3,
}
impl ::std::default::Default for Struct_dJointFeedback {
    fn default() -> Struct_dJointFeedback { unsafe { ::std::mem::zeroed() } }
}
pub type dJointFeedback = Struct_dJointFeedback;
pub type Enum_dInitODEFlags = ::libc::c_uint;
pub const dInitFlagManualThreadCleanup: ::libc::c_uint = 1;
pub type Enum_dAllocateODEDataFlags = ::libc::c_uint;
pub const dAllocateFlagBasicData: ::libc::c_uint = 0;
pub const dAllocateFlagCollisionData: ::libc::c_uint = 1;
pub const dAllocateMaskAll: ::libc::c_uint = 0xFFFFFFFF; // -1 was autogenerated by bindgen
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const dContactMu2: ::libc::c_uint = 1;
pub const dContactFDir1: ::libc::c_uint = 2;
pub const dContactBounce: ::libc::c_uint = 4;
pub const dContactSoftERP: ::libc::c_uint = 8;
pub const dContactSoftCFM: ::libc::c_uint = 16;
pub const dContactMotion1: ::libc::c_uint = 32;
pub const dContactMotion2: ::libc::c_uint = 64;
pub const dContactMotionN: ::libc::c_uint = 128;
pub const dContactSlip1: ::libc::c_uint = 256;
pub const dContactSlip2: ::libc::c_uint = 512;
pub const dContactApprox0: ::libc::c_uint = 0;
pub const dContactApprox1_1: ::libc::c_uint = 4096;
pub const dContactApprox1_2: ::libc::c_uint = 8192;
pub const dContactApprox1: ::libc::c_uint = 12288;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dSurfaceParameters {
    pub mode: ::libc::c_int,
    pub mu: dReal,
    pub mu2: dReal,
    pub bounce: dReal,
    pub bounce_vel: dReal,
    pub soft_erp: dReal,
    pub soft_cfm: dReal,
    pub motion1: dReal,
    pub motion2: dReal,
    pub motionN: dReal,
    pub slip1: dReal,
    pub slip2: dReal,
}
impl ::std::default::Default for Struct_dSurfaceParameters {
    fn default() -> Struct_dSurfaceParameters {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type dSurfaceParameters = Struct_dSurfaceParameters;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dContactGeom {
    pub pos: dVector3,
    pub normal: dVector3,
    pub depth: dReal,
    pub g1: dGeomID,
    pub g2: dGeomID,
    pub side1: ::libc::c_int,
    pub side2: ::libc::c_int,
}
impl ::std::default::Default for Struct_dContactGeom {
    fn default() -> Struct_dContactGeom { unsafe { ::std::mem::zeroed() } }
}
pub type dContactGeom = Struct_dContactGeom;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dContact {
    pub surface: dSurfaceParameters,
    pub geom: dContactGeom,
    pub fdir1: dVector3,
}
impl ::std::default::Default for Struct_dContact {
    fn default() -> Struct_dContact { unsafe { ::std::mem::zeroed() } }
}
pub type dContact = Struct_dContact;
pub type dAllocFunction = extern "C" fn(size: size_t) -> *mut ::libc::c_void;
pub type dReallocFunction =
    extern "C" fn(ptr: *mut ::libc::c_void, oldsize: size_t, newsize: size_t)
        -> *mut ::libc::c_void;
pub type dFreeFunction =
    extern "C" fn(ptr: *mut ::libc::c_void, size: size_t) -> ();
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dStopwatch {
    pub time: ::libc::c_double,
    pub cc: [::libc::c_ulong; 2usize],
}
impl ::std::default::Default for Struct_dStopwatch {
    fn default() -> Struct_dStopwatch { unsafe { ::std::mem::zeroed() } }
}
pub type dStopwatch = Struct_dStopwatch;
pub type dMass = Struct_dMass;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dMass {
    pub mass: dReal,
    pub c: dVector3,
    pub I: dMatrix3,
}
impl ::std::default::Default for Struct_dMass {
    fn default() -> Struct_dMass { unsafe { ::std::mem::zeroed() } }
}
pub type dNearCallback =
    extern "C" fn(data: *mut ::libc::c_void, o1: dGeomID, o2: dGeomID) -> ();
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const dMaxUserClasses: ::libc::c_uint = 4;
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const dSphereClass: ::libc::c_uint = 0;
pub const dBoxClass: ::libc::c_uint = 1;
pub const dCapsuleClass: ::libc::c_uint = 2;
pub const dCylinderClass: ::libc::c_uint = 3;
pub const dPlaneClass: ::libc::c_uint = 4;
pub const dRayClass: ::libc::c_uint = 5;
pub const dConvexClass: ::libc::c_uint = 6;
pub const dGeomTransformClass: ::libc::c_uint = 7;
pub const dTriMeshClass: ::libc::c_uint = 8;
pub const dHeightfieldClass: ::libc::c_uint = 9;
pub const dFirstSpaceClass: ::libc::c_uint = 10;
pub const dSimpleSpaceClass: ::libc::c_uint = 10;
pub const dHashSpaceClass: ::libc::c_uint = 11;
pub const dSweepAndPruneSpaceClass: ::libc::c_uint = 12;
pub const dQuadTreeSpaceClass: ::libc::c_uint = 13;
pub const dLastSpaceClass: ::libc::c_uint = 13;
pub const dFirstUserClass: ::libc::c_uint = 14;
pub const dLastUserClass: ::libc::c_uint = 17;
pub const dGeomNumClasses: ::libc::c_uint = 18;
pub enum Struct_dxTriMeshData { }
pub type dTriMeshDataID = *mut Struct_dxTriMeshData;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const TRIMESH_FACE_NORMALS: ::libc::c_uint = 0;
pub type dTriCallback =
    extern "C" fn(TriMesh: dGeomID, RefObject: dGeomID,
                  TriangleIndex: ::libc::c_int) -> ::libc::c_int;
pub type dTriArrayCallback =
    extern "C" fn(TriMesh: dGeomID, RefObject: dGeomID,
                  TriIndices: *const ::libc::c_int, TriCount: ::libc::c_int)
        -> ();
pub type dTriRayCallback =
    extern "C" fn(TriMesh: dGeomID, Ray: dGeomID,
                  TriangleIndex: ::libc::c_int, u: dReal, v: dReal)
        -> ::libc::c_int;
pub type dTriTriMergeCallback =
    extern "C" fn(TriMesh: dGeomID, FirstTriangleIndex: ::libc::c_int,
                  SecondTriangleIndex: ::libc::c_int) -> ::libc::c_int;
pub enum Struct_dxHeightfieldData { }
pub type dHeightfieldDataID = *mut Struct_dxHeightfieldData;
pub type dHeightfieldGetHeight =
    extern "C" fn(p_user_data: *mut ::libc::c_void, x: ::libc::c_int,
                  z: ::libc::c_int) -> dReal;
pub type dGetAABBFn = extern "C" fn(arg1: dGeomID, aabb: *mut dReal) -> ();
pub type dColliderFn =
    extern "C" fn(o1: dGeomID, o2: dGeomID, flags: ::libc::c_int,
                  contact: *mut dContactGeom, skip: ::libc::c_int)
        -> ::libc::c_int;
pub type dGetColliderFnFn =
    extern "C" fn(num: ::libc::c_int)
        ->
            *mut ::std::option::Option<extern "C" fn(num: ::libc::c_int)
                                           -> ::libc::c_int>;
pub type dGeomDtorFn = extern "C" fn(o: dGeomID) -> ();
pub type dAABBTestFn =
    extern "C" fn(o1: dGeomID, o2: dGeomID, aabb: *mut dReal)
        -> ::libc::c_int;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Struct_dGeomClass {
    pub bytes: ::libc::c_int,
    pub collider: *mut ::std::option::Option<extern "C" fn()
                                                 ->
                                                     *mut ::std::option::Option<extern "C" fn()
                                                                                    ->
                                                                                        ::libc::c_int>>,
    pub aabb: *mut ::std::option::Option<extern "C" fn() -> ()>,
    pub aabb_test: *mut ::std::option::Option<extern "C" fn()
                                                  -> ::libc::c_int>,
    pub dtor: *mut ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::default::Default for Struct_dGeomClass {
    fn default() -> Struct_dGeomClass { unsafe { ::std::mem::zeroed() } }
}
pub type dGeomClass = Struct_dGeomClass;
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut signgam: ::libc::c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn(__status:
                                                               ::libc::c_int,
                                                           __arg:
                                                               *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __secure_getenv(__name: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn acos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atan2(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __atan2(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn cosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn acosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn exp(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __exp(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn frexp(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __frexp(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn ldexp(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __ldexp(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn log(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log10(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log10(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn modf(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn __modf(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn expm1(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __expm1(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log1p(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log1p(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn logb(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __logb(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn exp2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __exp2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn pow(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __pow(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn sqrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sqrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn hypot(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __hypot(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cbrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cbrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn ceil(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __ceil(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fabs(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __fabs(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn floor(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __floor(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fmod(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmod(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __isinf(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __finite(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isinf(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn finite(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn drem(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __drem(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn significand(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __significand(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn copysign(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __copysign(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nan(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __nan(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __isnan(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isnan(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn j0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn j1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn jn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __jn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn y0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn y1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn yn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __yn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn erf(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erf(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfc(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erfc(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __lgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __tgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn gamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __gamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgamma_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __lgamma_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn rint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __rint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn nextafter(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nextafter(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nexttoward(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nexttoward(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remainder(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __remainder(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn scalbn(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __scalbn(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn ilogb(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __ilogb(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn scalbln(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn __scalbln(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn nearbyint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __nearbyint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn round(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __round(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn trunc(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __trunc(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn remquo(__x: ::libc::c_double, __y: ::libc::c_double,
                  __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn __remquo(__x: ::libc::c_double, __y: ::libc::c_double,
                    __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn lrint(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lrint(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llrint(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llrint(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn lround(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lround(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llround(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llround(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn fdim(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fdim(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmax(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmax(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmin(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmin(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fpclassify(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __signbit(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn fma(__x: ::libc::c_double, __y: ::libc::c_double,
               __z: ::libc::c_double) -> ::libc::c_double;
    pub fn __fma(__x: ::libc::c_double, __y: ::libc::c_double,
                 __z: ::libc::c_double) -> ::libc::c_double;
    pub fn scalb(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __scalb(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn acosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __acosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn asinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __asinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn atanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __atanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn atan2f(__y: ::libc::c_float, __x: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __atan2f(__y: ::libc::c_float, __x: ::libc::c_float)
     -> ::libc::c_float;
    pub fn cosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __cosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn sinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __sinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn tanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __tanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn coshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __coshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn sinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __sinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn tanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __tanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn acoshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __acoshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn asinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __asinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn atanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __atanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn expf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __expf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn frexpf(__x: ::libc::c_float, __exponent: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn __frexpf(__x: ::libc::c_float, __exponent: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn ldexpf(__x: ::libc::c_float, __exponent: ::libc::c_int)
     -> ::libc::c_float;
    pub fn __ldexpf(__x: ::libc::c_float, __exponent: ::libc::c_int)
     -> ::libc::c_float;
    pub fn logf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __logf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn log10f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __log10f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn modff(__x: ::libc::c_float, __iptr: *mut ::libc::c_float)
     -> ::libc::c_float;
    pub fn __modff(__x: ::libc::c_float, __iptr: *mut ::libc::c_float)
     -> ::libc::c_float;
    pub fn expm1f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __expm1f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn log1pf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __log1pf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn logbf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __logbf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn exp2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __exp2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn log2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __log2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn powf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __powf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn sqrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __sqrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn hypotf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __hypotf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn cbrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __cbrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn ceilf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __ceilf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn fabsf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __fabsf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn floorf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __floorf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn fmodf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fmodf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __isinff(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn __finitef(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn isinff(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn finitef(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn dremf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __dremf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn significandf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __significandf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn copysignf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __copysignf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn nanf(__tagb: *const ::libc::c_char) -> ::libc::c_float;
    pub fn __nanf(__tagb: *const ::libc::c_char) -> ::libc::c_float;
    pub fn __isnanf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn isnanf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn j0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __j0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn j1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __j1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn jnf(arg1: ::libc::c_int, arg2: ::libc::c_float) -> ::libc::c_float;
    pub fn __jnf(arg1: ::libc::c_int, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn y0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __y0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn y1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __y1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn ynf(arg1: ::libc::c_int, arg2: ::libc::c_float) -> ::libc::c_float;
    pub fn __ynf(arg1: ::libc::c_int, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn erff(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __erff(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn erfcf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __erfcf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn lgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __lgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn tgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __tgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn gammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __gammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn lgammaf_r(arg1: ::libc::c_float, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn __lgammaf_r(arg1: ::libc::c_float, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn rintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __rintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn nextafterf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __nextafterf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn nexttowardf(__x: ::libc::c_float, __y: ::libc::c_double)
     -> ::libc::c_float;
    pub fn __nexttowardf(__x: ::libc::c_float, __y: ::libc::c_double)
     -> ::libc::c_float;
    pub fn remainderf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __remainderf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn scalbnf(__x: ::libc::c_float, __n: ::libc::c_int)
     -> ::libc::c_float;
    pub fn __scalbnf(__x: ::libc::c_float, __n: ::libc::c_int)
     -> ::libc::c_float;
    pub fn ilogbf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __ilogbf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn scalblnf(__x: ::libc::c_float, __n: ::libc::c_long)
     -> ::libc::c_float;
    pub fn __scalblnf(__x: ::libc::c_float, __n: ::libc::c_long)
     -> ::libc::c_float;
    pub fn nearbyintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __nearbyintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn roundf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __roundf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn truncf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __truncf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn remquof(__x: ::libc::c_float, __y: ::libc::c_float,
                   __quo: *mut ::libc::c_int) -> ::libc::c_float;
    pub fn __remquof(__x: ::libc::c_float, __y: ::libc::c_float,
                     __quo: *mut ::libc::c_int) -> ::libc::c_float;
    pub fn lrintf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn __lrintf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn llrintf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn __llrintf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn lroundf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn __lroundf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn llroundf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn __llroundf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn fdimf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fdimf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fmaxf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fmaxf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fminf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fminf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fpclassifyf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn __signbitf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn fmaf(__x: ::libc::c_float, __y: ::libc::c_float,
                __z: ::libc::c_float) -> ::libc::c_float;
    pub fn __fmaf(__x: ::libc::c_float, __y: ::libc::c_float,
                  __z: ::libc::c_float) -> ::libc::c_float;
    pub fn scalbf(__x: ::libc::c_float, __n: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __scalbf(__x: ::libc::c_float, __n: ::libc::c_float)
     -> ::libc::c_float;
    pub fn acosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atan2l(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __atan2l(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn coshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __coshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn acoshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acoshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn expl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __expl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn frexpl(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __frexpl(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn ldexpl(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __ldexpl(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn logl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __logl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log10l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log10l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn modfl(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn __modfl(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn expm1l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __expm1l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log1pl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log1pl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn logbl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __logbl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn exp2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __exp2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn powl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __powl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn sqrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sqrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn hypotl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __hypotl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cbrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cbrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn ceill(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __ceill(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fabsl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __fabsl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn floorl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __floorl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fmodl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmodl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __isinfl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __finitel(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isinfl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn finitel(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn dreml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __dreml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn significandl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __significandl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn copysignl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __copysignl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nanl(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __nanl(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __isnanl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isnanl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn j0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn j1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn jnl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __jnl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn y0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn y1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn ynl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __ynl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn erfl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erfl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfcl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erfcl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __lgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __tgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn gammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __gammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgammal_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __lgammal_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn rintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __rintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn nextafterl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nextafterl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nexttowardl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nexttowardl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remainderl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __remainderl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn scalbnl(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __scalbnl(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn ilogbl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __ilogbl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn scalblnl(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn __scalblnl(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn nearbyintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __nearbyintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn roundl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __roundl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn truncl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __truncl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn remquol(__x: ::libc::c_double, __y: ::libc::c_double,
                   __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn __remquol(__x: ::libc::c_double, __y: ::libc::c_double,
                     __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn lrintl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lrintl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llrintl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llrintl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn lroundl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lroundl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llroundl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llroundl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn fdiml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fdiml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmaxl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmaxl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fminl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fminl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fpclassifyl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __signbitl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn fmal(__x: ::libc::c_double, __y: ::libc::c_double,
                __z: ::libc::c_double) -> ::libc::c_double;
    pub fn __fmal(__x: ::libc::c_double, __y: ::libc::c_double,
                  __z: ::libc::c_double) -> ::libc::c_double;
    pub fn scalbl(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __scalbl(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn matherr(__exc: *mut Struct_exception) -> ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn dSetErrorHandler(_fn:
                                *mut ::std::option::Option<extern "C" fn()
                                                               -> ()>) -> ();
    pub fn dSetDebugHandler(_fn:
                                *mut ::std::option::Option<extern "C" fn()
                                                               -> ()>) -> ();
    pub fn dSetMessageHandler(_fn:
                                  *mut ::std::option::Option<extern "C" fn()
                                                                 -> ()>)
     -> ();
    pub fn dGetErrorHandler()
     -> *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub fn dGetDebugHandler()
     -> *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub fn dGetMessageHandler()
     -> *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub fn dError(num: ::libc::c_int, msg: *const ::libc::c_char, ...) -> ();
    pub fn dDebug(num: ::libc::c_int, msg: *const ::libc::c_char, ...) -> ();
    pub fn dMessage(num: ::libc::c_int, msg: *const ::libc::c_char, ...)
     -> ();
    pub fn dGeomMoved(arg1: dGeomID) -> ();
    pub fn dGeomGetBodyNext(arg1: dGeomID) -> dGeomID;
    pub fn dGetConfiguration() -> *const ::libc::c_char;
    pub fn dCheckConfiguration(token: *const ::libc::c_char) -> ::libc::c_int;
    pub fn dInitODE() -> ();
    pub fn dInitODE2(uiInitFlags: ::libc::c_uint) -> ::libc::c_int;
    pub fn dAllocateODEDataForThread(uiAllocateFlags: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn dCleanupODEAllDataForThread() -> ();
    pub fn dCloseODE() -> ();
    pub fn dSetAllocHandler(_fn:
                                *mut ::std::option::Option<extern "C" fn()
                                                               ->
                                                                   *mut ::libc::c_void>)
     -> ();
    pub fn dSetReallocHandler(_fn:
                                  *mut ::std::option::Option<extern "C" fn()
                                                                 ->
                                                                     *mut ::libc::c_void>)
     -> ();
    pub fn dSetFreeHandler(_fn:
                               *mut ::std::option::Option<extern "C" fn()
                                                              -> ()>) -> ();
    pub fn dGetAllocHandler()
     -> *mut ::std::option::Option<extern "C" fn() -> *mut ::libc::c_void>;
    pub fn dGetReallocHandler()
     -> *mut ::std::option::Option<extern "C" fn() -> *mut ::libc::c_void>;
    pub fn dGetFreeHandler()
     -> *mut ::std::option::Option<extern "C" fn() -> ()>;
    pub fn dAlloc(size: size_t) -> *mut ::libc::c_void;
    pub fn dRealloc(ptr: *mut ::libc::c_void, oldsize: size_t,
                    newsize: size_t) -> *mut ::libc::c_void;
    pub fn dFree(ptr: *mut ::libc::c_void, size: size_t) -> ();
    pub fn _dSafeNormalize3(a: dVector3) -> ::libc::c_int;
    pub fn _dSafeNormalize4(a: dVector4) -> ::libc::c_int;
    pub fn dSafeNormalize3(a: dVector3) -> ::libc::c_int;
    pub fn dSafeNormalize4(a: dVector4) -> ::libc::c_int;
    pub fn dNormalize3(a: dVector3) -> ();
    pub fn dNormalize4(a: dVector4) -> ();
    pub fn dPlaneSpace(n: dVector3, p: dVector3, q: dVector3) -> ();
    pub fn dOrthogonalizeR(m: dMatrix3) -> ();
    pub fn dSetZero(a: *mut dReal, n: ::libc::c_int) -> ();
    pub fn dSetValue(a: *mut dReal, n: ::libc::c_int, value: dReal) -> ();
    pub fn dDot(a: *const dReal, b: *const dReal, n: ::libc::c_int) -> dReal;
    pub fn dMultiply0(A: *mut dReal, B: *const dReal, C: *const dReal,
                      p: ::libc::c_int, q: ::libc::c_int, r: ::libc::c_int)
     -> ();
    pub fn dMultiply1(A: *mut dReal, B: *const dReal, C: *const dReal,
                      p: ::libc::c_int, q: ::libc::c_int, r: ::libc::c_int)
     -> ();
    pub fn dMultiply2(A: *mut dReal, B: *const dReal, C: *const dReal,
                      p: ::libc::c_int, q: ::libc::c_int, r: ::libc::c_int)
     -> ();
    pub fn dFactorCholesky(A: *mut dReal, n: ::libc::c_int) -> ::libc::c_int;
    pub fn dSolveCholesky(L: *const dReal, b: *mut dReal, n: ::libc::c_int)
     -> ();
    pub fn dInvertPDMatrix(A: *const dReal, Ainv: *mut dReal,
                           n: ::libc::c_int) -> ::libc::c_int;
    pub fn dIsPositiveDefinite(A: *const dReal, n: ::libc::c_int)
     -> ::libc::c_int;
    pub fn dFactorLDLT(A: *mut dReal, d: *mut dReal, n: ::libc::c_int,
                       nskip: ::libc::c_int) -> ();
    pub fn dSolveL1(L: *const dReal, b: *mut dReal, n: ::libc::c_int,
                    nskip: ::libc::c_int) -> ();
    pub fn dSolveL1T(L: *const dReal, b: *mut dReal, n: ::libc::c_int,
                     nskip: ::libc::c_int) -> ();
    pub fn dVectorScale(a: *mut dReal, d: *const dReal, n: ::libc::c_int)
     -> ();
    pub fn dSolveLDLT(L: *const dReal, d: *const dReal, b: *mut dReal,
                      n: ::libc::c_int, nskip: ::libc::c_int) -> ();
    pub fn dLDLTAddTL(L: *mut dReal, d: *mut dReal, a: *const dReal,
                      n: ::libc::c_int, nskip: ::libc::c_int) -> ();
    pub fn dLDLTRemove(A: *mut *mut dReal, p: *const ::libc::c_int,
                       L: *mut dReal, d: *mut dReal, n1: ::libc::c_int,
                       n2: ::libc::c_int, r: ::libc::c_int,
                       nskip: ::libc::c_int) -> ();
    pub fn dRemoveRowCol(A: *mut dReal, n: ::libc::c_int,
                         nskip: ::libc::c_int, r: ::libc::c_int) -> ();
    pub fn dStopwatchReset(arg1: *mut dStopwatch) -> ();
    pub fn dStopwatchStart(arg1: *mut dStopwatch) -> ();
    pub fn dStopwatchStop(arg1: *mut dStopwatch) -> ();
    pub fn dStopwatchTime(arg1: *mut dStopwatch) -> ::libc::c_double;
    pub fn dTimerStart(description: *const ::libc::c_char) -> ();
    pub fn dTimerNow(description: *const ::libc::c_char) -> ();
    pub fn dTimerEnd() -> ();
    pub fn dTimerReport(fout: *mut FILE, average: ::libc::c_int) -> ();
    pub fn dTimerTicksPerSecond() -> ::libc::c_double;
    pub fn dTimerResolution() -> ::libc::c_double;
    pub fn dRSetIdentity(R: dMatrix3) -> ();
    pub fn dRFromAxisAndAngle(R: dMatrix3, ax: dReal, ay: dReal, az: dReal,
                              angle: dReal) -> ();
    pub fn dRFromEulerAngles(R: dMatrix3, phi: dReal, theta: dReal,
                             psi: dReal) -> ();
    pub fn dRFrom2Axes(R: dMatrix3, ax: dReal, ay: dReal, az: dReal,
                       bx: dReal, by: dReal, bz: dReal) -> ();
    pub fn dRFromZAxis(R: dMatrix3, ax: dReal, ay: dReal, az: dReal) -> ();
    pub fn dQSetIdentity(q: dQuaternion) -> ();
    pub fn dQFromAxisAndAngle(q: dQuaternion, ax: dReal, ay: dReal, az: dReal,
                              angle: dReal) -> ();
    pub fn dQMultiply0(qa: dQuaternion, qb: dQuaternion, qc: dQuaternion)
     -> ();
    pub fn dQMultiply1(qa: dQuaternion, qb: dQuaternion, qc: dQuaternion)
     -> ();
    pub fn dQMultiply2(qa: dQuaternion, qb: dQuaternion, qc: dQuaternion)
     -> ();
    pub fn dQMultiply3(qa: dQuaternion, qb: dQuaternion, qc: dQuaternion)
     -> ();
    pub fn dRfromQ(R: dMatrix3, q: dQuaternion) -> ();
    pub fn dQfromR(q: dQuaternion, R: dMatrix3) -> ();
    pub fn dDQfromW(dq: *mut dReal, w: dVector3, q: dQuaternion) -> ();
    pub fn dMassCheck(m: *const dMass) -> ::libc::c_int;
    pub fn dMassSetZero(arg1: *mut dMass) -> ();
    pub fn dMassSetParameters(arg1: *mut dMass, themass: dReal, cgx: dReal,
                              cgy: dReal, cgz: dReal, I11: dReal, I22: dReal,
                              I33: dReal, I12: dReal, I13: dReal, I23: dReal)
     -> ();
    pub fn dMassSetSphere(arg1: *mut dMass, density: dReal, radius: dReal)
     -> ();
    pub fn dMassSetSphereTotal(arg1: *mut dMass, total_mass: dReal,
                               radius: dReal) -> ();
    pub fn dMassSetCapsule(arg1: *mut dMass, density: dReal,
                           direction: ::libc::c_int, radius: dReal,
                           length: dReal) -> ();
    pub fn dMassSetCapsuleTotal(arg1: *mut dMass, total_mass: dReal,
                                direction: ::libc::c_int, radius: dReal,
                                length: dReal) -> ();
    pub fn dMassSetCylinder(arg1: *mut dMass, density: dReal,
                            direction: ::libc::c_int, radius: dReal,
                            length: dReal) -> ();
    pub fn dMassSetCylinderTotal(arg1: *mut dMass, total_mass: dReal,
                                 direction: ::libc::c_int, radius: dReal,
                                 length: dReal) -> ();
    pub fn dMassSetBox(arg1: *mut dMass, density: dReal, lx: dReal, ly: dReal,
                       lz: dReal) -> ();
    pub fn dMassSetBoxTotal(arg1: *mut dMass, total_mass: dReal, lx: dReal,
                            ly: dReal, lz: dReal) -> ();
    pub fn dMassSetTrimesh(arg1: *mut dMass, density: dReal, g: dGeomID)
     -> ();
    pub fn dMassSetTrimeshTotal(m: *mut dMass, total_mass: dReal, g: dGeomID)
     -> ();
    pub fn dMassAdjust(arg1: *mut dMass, newmass: dReal) -> ();
    pub fn dMassTranslate(arg1: *mut dMass, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dMassRotate(arg1: *mut dMass, R: dMatrix3) -> ();
    pub fn dMassAdd(a: *mut dMass, b: *const dMass) -> ();
    pub fn dMassSetCappedCylinder(a: *mut dMass, b: dReal, c: ::libc::c_int,
                                  d: dReal, e: dReal) -> ();
    pub fn dMassSetCappedCylinderTotal(a: *mut dMass, b: dReal,
                                       c: ::libc::c_int, d: dReal, e: dReal)
     -> ();
    pub fn dTestRand() -> ::libc::c_int;
    pub fn dRand() -> ::libc::c_ulong;
    pub fn dRandGetSeed() -> ::libc::c_ulong;
    pub fn dRandSetSeed(s: ::libc::c_ulong) -> ();
    pub fn dRandInt(n: ::libc::c_int) -> ::libc::c_int;
    pub fn dRandReal() -> dReal;
    pub fn dPrintMatrix(A: *const dReal, n: ::libc::c_int, m: ::libc::c_int,
                        fmt: *mut ::libc::c_char, f: *mut FILE) -> ();
    pub fn dMakeRandomVector(A: *mut dReal, n: ::libc::c_int, range: dReal)
     -> ();
    pub fn dMakeRandomMatrix(A: *mut dReal, n: ::libc::c_int,
                             m: ::libc::c_int, range: dReal) -> ();
    pub fn dClearUpperTriangle(A: *mut dReal, n: ::libc::c_int) -> ();
    pub fn dMaxDifference(A: *const dReal, B: *const dReal, n: ::libc::c_int,
                          m: ::libc::c_int) -> dReal;
    pub fn dMaxDifferenceLowerTriangle(A: *const dReal, B: *const dReal,
                                       n: ::libc::c_int) -> dReal;
    pub fn dWorldCreate() -> dWorldID;
    pub fn dWorldDestroy(world: dWorldID) -> ();
    pub fn dWorldSetGravity(arg1: dWorldID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dWorldGetGravity(arg1: dWorldID, gravity: dVector3) -> ();
    pub fn dWorldSetERP(arg1: dWorldID, erp: dReal) -> ();
    pub fn dWorldGetERP(arg1: dWorldID) -> dReal;
    pub fn dWorldSetCFM(arg1: dWorldID, cfm: dReal) -> ();
    pub fn dWorldGetCFM(arg1: dWorldID) -> dReal;
    pub fn dWorldStep(arg1: dWorldID, stepsize: dReal) -> ();
    pub fn dWorldImpulseToForce(arg1: dWorldID, stepsize: dReal, ix: dReal,
                                iy: dReal, iz: dReal, force: dVector3) -> ();
    pub fn dWorldQuickStep(w: dWorldID, stepsize: dReal) -> ();
    pub fn dWorldSetQuickStepNumIterations(arg1: dWorldID, num: ::libc::c_int)
     -> ();
    pub fn dWorldGetQuickStepNumIterations(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldSetQuickStepW(arg1: dWorldID, over_relaxation: dReal) -> ();
    pub fn dWorldGetQuickStepW(arg1: dWorldID) -> dReal;
    pub fn dWorldSetContactMaxCorrectingVel(arg1: dWorldID, vel: dReal) -> ();
    pub fn dWorldGetContactMaxCorrectingVel(arg1: dWorldID) -> dReal;
    pub fn dWorldSetContactSurfaceLayer(arg1: dWorldID, depth: dReal) -> ();
    pub fn dWorldGetContactSurfaceLayer(arg1: dWorldID) -> dReal;
    pub fn dWorldStepFast1(arg1: dWorldID, stepsize: dReal,
                           maxiterations: ::libc::c_int) -> ();
    pub fn dWorldSetAutoEnableDepthSF1(arg1: dWorldID,
                                       autoEnableDepth: ::libc::c_int) -> ();
    pub fn dWorldGetAutoEnableDepthSF1(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldGetAutoDisableLinearThreshold(arg1: dWorldID) -> dReal;
    pub fn dWorldSetAutoDisableLinearThreshold(arg1: dWorldID,
                                               linear_threshold: dReal) -> ();
    pub fn dWorldGetAutoDisableAngularThreshold(arg1: dWorldID) -> dReal;
    pub fn dWorldSetAutoDisableAngularThreshold(arg1: dWorldID,
                                                angular_threshold: dReal)
     -> ();
    pub fn dWorldGetAutoDisableLinearAverageThreshold(arg1: dWorldID)
     -> dReal;
    pub fn dWorldSetAutoDisableLinearAverageThreshold(arg1: dWorldID,
                                                      linear_average_threshold:
                                                          dReal) -> ();
    pub fn dWorldGetAutoDisableAngularAverageThreshold(arg1: dWorldID)
     -> dReal;
    pub fn dWorldSetAutoDisableAngularAverageThreshold(arg1: dWorldID,
                                                       angular_average_threshold:
                                                           dReal) -> ();
    pub fn dWorldGetAutoDisableAverageSamplesCount(arg1: dWorldID)
     -> ::libc::c_int;
    pub fn dWorldSetAutoDisableAverageSamplesCount(arg1: dWorldID,
                                                   average_samples_count:
                                                       ::libc::c_uint) -> ();
    pub fn dWorldGetAutoDisableSteps(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldSetAutoDisableSteps(arg1: dWorldID, steps: ::libc::c_int)
     -> ();
    pub fn dWorldGetAutoDisableTime(arg1: dWorldID) -> dReal;
    pub fn dWorldSetAutoDisableTime(arg1: dWorldID, time: dReal) -> ();
    pub fn dWorldGetAutoDisableFlag(arg1: dWorldID) -> ::libc::c_int;
    pub fn dWorldSetAutoDisableFlag(arg1: dWorldID,
                                    do_auto_disable: ::libc::c_int) -> ();
    pub fn dWorldGetLinearDampingThreshold(w: dWorldID) -> dReal;
    pub fn dWorldSetLinearDampingThreshold(w: dWorldID, threshold: dReal)
     -> ();
    pub fn dWorldGetAngularDampingThreshold(w: dWorldID) -> dReal;
    pub fn dWorldSetAngularDampingThreshold(w: dWorldID, threshold: dReal)
     -> ();
    pub fn dWorldGetLinearDamping(w: dWorldID) -> dReal;
    pub fn dWorldSetLinearDamping(w: dWorldID, scale: dReal) -> ();
    pub fn dWorldGetAngularDamping(w: dWorldID) -> dReal;
    pub fn dWorldSetAngularDamping(w: dWorldID, scale: dReal) -> ();
    pub fn dWorldSetDamping(w: dWorldID, linear_scale: dReal,
                            angular_scale: dReal) -> ();
    pub fn dWorldGetMaxAngularSpeed(w: dWorldID) -> dReal;
    pub fn dWorldSetMaxAngularSpeed(w: dWorldID, max_speed: dReal) -> ();
    pub fn dBodyGetAutoDisableLinearThreshold(arg1: dBodyID) -> dReal;
    pub fn dBodySetAutoDisableLinearThreshold(arg1: dBodyID,
                                              linear_average_threshold: dReal)
     -> ();
    pub fn dBodyGetAutoDisableAngularThreshold(arg1: dBodyID) -> dReal;
    pub fn dBodySetAutoDisableAngularThreshold(arg1: dBodyID,
                                               angular_average_threshold:
                                                   dReal) -> ();
    pub fn dBodyGetAutoDisableAverageSamplesCount(arg1: dBodyID)
     -> ::libc::c_int;
    pub fn dBodySetAutoDisableAverageSamplesCount(arg1: dBodyID,
                                                  average_samples_count:
                                                      ::libc::c_uint) -> ();
    pub fn dBodyGetAutoDisableSteps(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodySetAutoDisableSteps(arg1: dBodyID, steps: ::libc::c_int)
     -> ();
    pub fn dBodyGetAutoDisableTime(arg1: dBodyID) -> dReal;
    pub fn dBodySetAutoDisableTime(arg1: dBodyID, time: dReal) -> ();
    pub fn dBodyGetAutoDisableFlag(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodySetAutoDisableFlag(arg1: dBodyID,
                                   do_auto_disable: ::libc::c_int) -> ();
    pub fn dBodySetAutoDisableDefaults(arg1: dBodyID) -> ();
    pub fn dBodyGetWorld(arg1: dBodyID) -> dWorldID;
    pub fn dBodyCreate(arg1: dWorldID) -> dBodyID;
    pub fn dBodyDestroy(arg1: dBodyID) -> ();
    pub fn dBodySetData(arg1: dBodyID, data: *mut ::libc::c_void) -> ();
    pub fn dBodyGetData(arg1: dBodyID) -> *mut ::libc::c_void;
    pub fn dBodySetPosition(arg1: dBodyID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dBodySetRotation(arg1: dBodyID, R: dMatrix3) -> ();
    pub fn dBodySetQuaternion(arg1: dBodyID, q: dQuaternion) -> ();
    pub fn dBodySetLinearVel(arg1: dBodyID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dBodySetAngularVel(arg1: dBodyID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dBodyGetPosition(arg1: dBodyID) -> *const dReal;
    pub fn dBodyCopyPosition(body: dBodyID, pos: dVector3) -> ();
    pub fn dBodyGetRotation(arg1: dBodyID) -> *const dReal;
    pub fn dBodyCopyRotation(arg1: dBodyID, R: dMatrix3) -> ();
    pub fn dBodyGetQuaternion(arg1: dBodyID) -> *const dReal;
    pub fn dBodyCopyQuaternion(body: dBodyID, quat: dQuaternion) -> ();
    pub fn dBodyGetLinearVel(arg1: dBodyID) -> *const dReal;
    pub fn dBodyGetAngularVel(arg1: dBodyID) -> *const dReal;
    pub fn dBodySetMass(arg1: dBodyID, mass: *const dMass) -> ();
    pub fn dBodyGetMass(arg1: dBodyID, mass: *mut dMass) -> ();
    pub fn dBodyAddForce(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddTorque(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddRelForce(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddRelTorque(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal)
     -> ();
    pub fn dBodyAddForceAtPos(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal,
                              px: dReal, py: dReal, pz: dReal) -> ();
    pub fn dBodyAddForceAtRelPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                 fz: dReal, px: dReal, py: dReal, pz: dReal)
     -> ();
    pub fn dBodyAddRelForceAtPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                 fz: dReal, px: dReal, py: dReal, pz: dReal)
     -> ();
    pub fn dBodyAddRelForceAtRelPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                    fz: dReal, px: dReal, py: dReal,
                                    pz: dReal) -> ();
    pub fn dBodyGetForce(arg1: dBodyID) -> *const dReal;
    pub fn dBodyGetTorque(arg1: dBodyID) -> *const dReal;
    pub fn dBodySetForce(b: dBodyID, x: dReal, y: dReal, z: dReal) -> ();
    pub fn dBodySetTorque(b: dBodyID, x: dReal, y: dReal, z: dReal) -> ();
    pub fn dBodyGetRelPointPos(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dBodyGetRelPointVel(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dBodyGetPointVel(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                            result: dVector3) -> ();
    pub fn dBodyGetPosRelPoint(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: dVector3) -> ();
    pub fn dBodyVectorToWorld(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                              result: dVector3) -> ();
    pub fn dBodyVectorFromWorld(arg1: dBodyID, px: dReal, py: dReal,
                                pz: dReal, result: dVector3) -> ();
    pub fn dBodySetFiniteRotationMode(arg1: dBodyID, mode: ::libc::c_int)
     -> ();
    pub fn dBodySetFiniteRotationAxis(arg1: dBodyID, x: dReal, y: dReal,
                                      z: dReal) -> ();
    pub fn dBodyGetFiniteRotationMode(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodyGetFiniteRotationAxis(arg1: dBodyID, result: dVector3) -> ();
    pub fn dBodyGetNumJoints(b: dBodyID) -> ::libc::c_int;
    pub fn dBodyGetJoint(arg1: dBodyID, index: ::libc::c_int) -> dJointID;
    pub fn dBodySetDynamic(arg1: dBodyID) -> ();
    pub fn dBodySetKinematic(arg1: dBodyID) -> ();
    pub fn dBodyIsKinematic(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodyEnable(arg1: dBodyID) -> ();
    pub fn dBodyDisable(arg1: dBodyID) -> ();
    pub fn dBodyIsEnabled(arg1: dBodyID) -> ::libc::c_int;
    pub fn dBodySetGravityMode(b: dBodyID, mode: ::libc::c_int) -> ();
    pub fn dBodyGetGravityMode(b: dBodyID) -> ::libc::c_int;
    pub fn dBodySetMovedCallback(b: dBodyID,
                                 callback:
                                     ::std::option::Option<extern "C" fn(arg1:
                                                                             dBodyID)
                                                               -> ()>) -> ();
    pub fn dBodyGetFirstGeom(b: dBodyID) -> dGeomID;
    pub fn dBodyGetNextGeom(g: dGeomID) -> dGeomID;
    pub fn dBodySetDampingDefaults(b: dBodyID) -> ();
    pub fn dBodyGetLinearDamping(b: dBodyID) -> dReal;
    pub fn dBodySetLinearDamping(b: dBodyID, scale: dReal) -> ();
    pub fn dBodyGetAngularDamping(b: dBodyID) -> dReal;
    pub fn dBodySetAngularDamping(b: dBodyID, scale: dReal) -> ();
    pub fn dBodySetDamping(b: dBodyID, linear_scale: dReal,
                           angular_scale: dReal) -> ();
    pub fn dBodyGetLinearDampingThreshold(b: dBodyID) -> dReal;
    pub fn dBodySetLinearDampingThreshold(b: dBodyID, threshold: dReal) -> ();
    pub fn dBodyGetAngularDampingThreshold(b: dBodyID) -> dReal;
    pub fn dBodySetAngularDampingThreshold(b: dBodyID, threshold: dReal)
     -> ();
    pub fn dBodyGetMaxAngularSpeed(b: dBodyID) -> dReal;
    pub fn dBodySetMaxAngularSpeed(b: dBodyID, max_speed: dReal) -> ();
    pub fn dBodyGetGyroscopicMode(b: dBodyID) -> ::libc::c_int;
    pub fn dBodySetGyroscopicMode(b: dBodyID, enabled: ::libc::c_int) -> ();
    pub fn dJointCreateBall(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateHinge(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateSlider(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateContact(arg1: dWorldID, arg2: dJointGroupID,
                               arg3: *const dContact) -> dJointID;
    pub fn dJointCreateHinge2(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateUniversal(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreatePR(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreatePU(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreatePiston(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateFixed(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateNull(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
    pub fn dJointCreateAMotor(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreateLMotor(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointCreatePlane2D(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
    pub fn dJointDestroy(arg1: dJointID) -> ();
    pub fn dJointGroupCreate(max_size: ::libc::c_int) -> dJointGroupID;
    pub fn dJointGroupDestroy(arg1: dJointGroupID) -> ();
    pub fn dJointGroupEmpty(arg1: dJointGroupID) -> ();
    pub fn dJointGetNumBodies(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointAttach(arg1: dJointID, body1: dBodyID, body2: dBodyID) -> ();
    pub fn dJointEnable(arg1: dJointID) -> ();
    pub fn dJointDisable(arg1: dJointID) -> ();
    pub fn dJointIsEnabled(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointSetData(arg1: dJointID, data: *mut ::libc::c_void) -> ();
    pub fn dJointGetData(arg1: dJointID) -> *mut ::libc::c_void;
    pub fn dJointGetType(arg1: dJointID) -> dJointType;
    pub fn dJointGetBody(arg1: dJointID, index: ::libc::c_int) -> dBodyID;
    pub fn dJointSetFeedback(arg1: dJointID, arg2: *mut dJointFeedback) -> ();
    pub fn dJointGetFeedback(arg1: dJointID) -> *mut dJointFeedback;
    pub fn dJointSetBallAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetBallAnchor2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetBallParam(arg1: dJointID, parameter: ::libc::c_int,
                              value: dReal) -> ();
    pub fn dJointSetHingeAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHingeAnchorDelta(arg1: dJointID, x: dReal, y: dReal,
                                     z: dReal, ax: dReal, ay: dReal,
                                     az: dReal) -> ();
    pub fn dJointSetHingeAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHingeAxisOffset(j: dJointID, x: dReal, y: dReal, z: dReal,
                                    angle: dReal) -> ();
    pub fn dJointSetHingeParam(arg1: dJointID, parameter: ::libc::c_int,
                               value: dReal) -> ();
    pub fn dJointAddHingeTorque(joint: dJointID, torque: dReal) -> ();
    pub fn dJointSetSliderAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetSliderAxisDelta(arg1: dJointID, x: dReal, y: dReal,
                                    z: dReal, ax: dReal, ay: dReal, az: dReal)
     -> ();
    pub fn dJointSetSliderParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointAddSliderForce(joint: dJointID, force: dReal) -> ();
    pub fn dJointSetHinge2Anchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHinge2Axis1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHinge2Axis2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetHinge2Param(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointAddHinge2Torques(joint: dJointID, torque1: dReal,
                                  torque2: dReal) -> ();
    pub fn dJointSetUniversalAnchor(arg1: dJointID, x: dReal, y: dReal,
                                    z: dReal) -> ();
    pub fn dJointSetUniversalAxis1(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal) -> ();
    pub fn dJointSetUniversalAxis1Offset(arg1: dJointID, x: dReal, y: dReal,
                                         z: dReal, offset1: dReal,
                                         offset2: dReal) -> ();
    pub fn dJointSetUniversalAxis2(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal) -> ();
    pub fn dJointSetUniversalAxis2Offset(arg1: dJointID, x: dReal, y: dReal,
                                         z: dReal, offset1: dReal,
                                         offset2: dReal) -> ();
    pub fn dJointSetUniversalParam(arg1: dJointID, parameter: ::libc::c_int,
                                   value: dReal) -> ();
    pub fn dJointAddUniversalTorques(joint: dJointID, torque1: dReal,
                                     torque2: dReal) -> ();
    pub fn dJointSetPRAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPRAxis1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPRAxis2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPRParam(arg1: dJointID, parameter: ::libc::c_int,
                            value: dReal) -> ();
    pub fn dJointAddPRTorque(j: dJointID, torque: dReal) -> ();
    pub fn dJointSetPUAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAnchorDelta(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal, dx: dReal, dy: dReal, dz: dReal)
     -> ();
    pub fn dJointSetPUAnchorOffset(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal, dx: dReal, dy: dReal, dz: dReal)
     -> ();
    pub fn dJointSetPUAxis1(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAxis2(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAxis3(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPUAxisP(id: dJointID, x: dReal, y: dReal, z: dReal) -> ();
    pub fn dJointSetPUParam(arg1: dJointID, parameter: ::libc::c_int,
                            value: dReal) -> ();
    pub fn dJointAddPUTorque(j: dJointID, torque: dReal) -> ();
    pub fn dJointSetPistonAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPistonAnchorOffset(j: dJointID, x: dReal, y: dReal,
                                       z: dReal, dx: dReal, dy: dReal,
                                       dz: dReal) -> ();
    pub fn dJointSetPistonAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dJointSetPistonAxisDelta(j: dJointID, x: dReal, y: dReal, z: dReal,
                                    ax: dReal, ay: dReal, az: dReal) -> ();
    pub fn dJointSetPistonParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointAddPistonForce(joint: dJointID, force: dReal) -> ();
    pub fn dJointSetFixed(arg1: dJointID) -> ();
    pub fn dJointSetFixedParam(arg1: dJointID, parameter: ::libc::c_int,
                               value: dReal) -> ();
    pub fn dJointSetAMotorNumAxes(arg1: dJointID, num: ::libc::c_int) -> ();
    pub fn dJointSetAMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               rel: ::libc::c_int, x: dReal, y: dReal,
                               z: dReal) -> ();
    pub fn dJointSetAMotorAngle(arg1: dJointID, anum: ::libc::c_int,
                                angle: dReal) -> ();
    pub fn dJointSetAMotorParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointSetAMotorMode(arg1: dJointID, mode: ::libc::c_int) -> ();
    pub fn dJointAddAMotorTorques(arg1: dJointID, torque1: dReal,
                                  torque2: dReal, torque3: dReal) -> ();
    pub fn dJointSetLMotorNumAxes(arg1: dJointID, num: ::libc::c_int) -> ();
    pub fn dJointSetLMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               rel: ::libc::c_int, x: dReal, y: dReal,
                               z: dReal) -> ();
    pub fn dJointSetLMotorParam(arg1: dJointID, parameter: ::libc::c_int,
                                value: dReal) -> ();
    pub fn dJointSetPlane2DXParam(arg1: dJointID, parameter: ::libc::c_int,
                                  value: dReal) -> ();
    pub fn dJointSetPlane2DYParam(arg1: dJointID, parameter: ::libc::c_int,
                                  value: dReal) -> ();
    pub fn dJointSetPlane2DAngleParam(arg1: dJointID,
                                      parameter: ::libc::c_int, value: dReal)
     -> ();
    pub fn dJointGetBallAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetBallAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetBallParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHingeAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHingeAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHingeAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHingeParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHingeAngle(arg1: dJointID) -> dReal;
    pub fn dJointGetHingeAngleRate(arg1: dJointID) -> dReal;
    pub fn dJointGetSliderPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetSliderPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetSliderAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetSliderParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHinge2Anchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Anchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Axis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Axis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetHinge2Param(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetHinge2Angle1(arg1: dJointID) -> dReal;
    pub fn dJointGetHinge2Angle1Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetHinge2Angle2Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetUniversalParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetUniversalAngles(arg1: dJointID, angle1: *mut dReal,
                                    angle2: *mut dReal) -> ();
    pub fn dJointGetUniversalAngle1(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAngle2(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAngle1Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetUniversalAngle2Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPRPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetPRPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAngle(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAngleRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPRAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPRAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPRParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetPUAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetPUPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAxis1(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAxis2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAxis3(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAxisP(id: dJointID, result: dVector3) -> ();
    pub fn dJointGetPUAngles(arg1: dJointID, angle1: *mut dReal,
                             angle2: *mut dReal) -> ();
    pub fn dJointGetPUAngle1(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAngle1Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAngle2(arg1: dJointID) -> dReal;
    pub fn dJointGetPUAngle2Rate(arg1: dJointID) -> dReal;
    pub fn dJointGetPUParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetPistonPosition(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonPositionRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonAngle(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonAngleRate(arg1: dJointID) -> dReal;
    pub fn dJointGetPistonAnchor(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPistonAnchor2(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPistonAxis(arg1: dJointID, result: dVector3) -> ();
    pub fn dJointGetPistonParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetAMotorNumAxes(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointGetAMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               result: dVector3) -> ();
    pub fn dJointGetAMotorAxisRel(arg1: dJointID, anum: ::libc::c_int)
     -> ::libc::c_int;
    pub fn dJointGetAMotorAngle(arg1: dJointID, anum: ::libc::c_int) -> dReal;
    pub fn dJointGetAMotorAngleRate(arg1: dJointID, anum: ::libc::c_int)
     -> dReal;
    pub fn dJointGetAMotorParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetAMotorMode(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointGetLMotorNumAxes(arg1: dJointID) -> ::libc::c_int;
    pub fn dJointGetLMotorAxis(arg1: dJointID, anum: ::libc::c_int,
                               result: dVector3) -> ();
    pub fn dJointGetLMotorParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dJointGetFixedParam(arg1: dJointID, parameter: ::libc::c_int)
     -> dReal;
    pub fn dConnectingJoint(arg1: dBodyID, arg2: dBodyID) -> dJointID;
    pub fn dConnectingJointList(arg1: dBodyID, arg2: dBodyID,
                                arg3: *mut dJointID) -> ::libc::c_int;
    pub fn dAreConnected(arg1: dBodyID, arg2: dBodyID) -> ::libc::c_int;
    pub fn dAreConnectedExcluding(body1: dBodyID, body2: dBodyID,
                                  joint_type: ::libc::c_int) -> ::libc::c_int;
    pub fn dSimpleSpaceCreate(space: dSpaceID) -> dSpaceID;
    pub fn dHashSpaceCreate(space: dSpaceID) -> dSpaceID;
    pub fn dQuadTreeSpaceCreate(space: dSpaceID, Center: dVector3,
                                Extents: dVector3, Depth: ::libc::c_int)
     -> dSpaceID;
    pub fn dSweepAndPruneSpaceCreate(space: dSpaceID,
                                     axisorder: ::libc::c_int) -> dSpaceID;
    pub fn dSpaceDestroy(arg1: dSpaceID) -> ();
    pub fn dHashSpaceSetLevels(space: dSpaceID, minlevel: ::libc::c_int,
                               maxlevel: ::libc::c_int) -> ();
    pub fn dHashSpaceGetLevels(space: dSpaceID, minlevel: *mut ::libc::c_int,
                               maxlevel: *mut ::libc::c_int) -> ();
    pub fn dSpaceSetCleanup(space: dSpaceID, mode: ::libc::c_int) -> ();
    pub fn dSpaceGetCleanup(space: dSpaceID) -> ::libc::c_int;
    pub fn dSpaceSetSublevel(space: dSpaceID, sublevel: ::libc::c_int) -> ();
    pub fn dSpaceGetSublevel(space: dSpaceID) -> ::libc::c_int;
    pub fn dSpaceSetManualCleanup(space: dSpaceID, mode: ::libc::c_int) -> ();
    pub fn dSpaceGetManualCleanup(space: dSpaceID) -> ::libc::c_int;
    pub fn dSpaceAdd(arg1: dSpaceID, arg2: dGeomID) -> ();
    pub fn dSpaceRemove(arg1: dSpaceID, arg2: dGeomID) -> ();
    pub fn dSpaceQuery(arg1: dSpaceID, arg2: dGeomID) -> ::libc::c_int;
    pub fn dSpaceClean(arg1: dSpaceID) -> ();
    pub fn dSpaceGetNumGeoms(arg1: dSpaceID) -> ::libc::c_int;
    pub fn dSpaceGetGeom(arg1: dSpaceID, i: ::libc::c_int) -> dGeomID;
    pub fn dSpaceGetClass(space: dSpaceID) -> ::libc::c_int;
    pub fn dGeomDestroy(geom: dGeomID) -> ();
    pub fn dGeomSetData(geom: dGeomID, data: *mut ::libc::c_void) -> ();
    pub fn dGeomGetData(geom: dGeomID) -> *mut ::libc::c_void;
    pub fn dGeomSetBody(geom: dGeomID, body: dBodyID) -> ();
    pub fn dGeomGetBody(geom: dGeomID) -> dBodyID;
    pub fn dGeomSetPosition(geom: dGeomID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dGeomSetRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomSetQuaternion(geom: dGeomID, Q: dQuaternion) -> ();
    pub fn dGeomGetPosition(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyPosition(geom: dGeomID, pos: dVector3) -> ();
    pub fn dGeomGetRotation(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomGetQuaternion(geom: dGeomID, result: dQuaternion) -> ();
    pub fn dGeomGetAABB(geom: dGeomID, aabb: *mut dReal) -> ();
    pub fn dGeomIsSpace(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomGetSpace(arg1: dGeomID) -> dSpaceID;
    pub fn dGeomGetClass(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomSetCategoryBits(geom: dGeomID, bits: ::libc::c_ulong) -> ();
    pub fn dGeomSetCollideBits(geom: dGeomID, bits: ::libc::c_ulong) -> ();
    pub fn dGeomGetCategoryBits(arg1: dGeomID) -> ::libc::c_ulong;
    pub fn dGeomGetCollideBits(arg1: dGeomID) -> ::libc::c_ulong;
    pub fn dGeomEnable(geom: dGeomID) -> ();
    pub fn dGeomDisable(geom: dGeomID) -> ();
    pub fn dGeomIsEnabled(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomSetOffsetPosition(geom: dGeomID, x: dReal, y: dReal, z: dReal)
     -> ();
    pub fn dGeomSetOffsetRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomSetOffsetQuaternion(geom: dGeomID, Q: dQuaternion) -> ();
    pub fn dGeomSetOffsetWorldPosition(geom: dGeomID, x: dReal, y: dReal,
                                       z: dReal) -> ();
    pub fn dGeomSetOffsetWorldRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomSetOffsetWorldQuaternion(geom: dGeomID, arg1: dQuaternion)
     -> ();
    pub fn dGeomClearOffset(geom: dGeomID) -> ();
    pub fn dGeomIsOffset(geom: dGeomID) -> ::libc::c_int;
    pub fn dGeomGetOffsetPosition(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyOffsetPosition(geom: dGeomID, pos: dVector3) -> ();
    pub fn dGeomGetOffsetRotation(geom: dGeomID) -> *const dReal;
    pub fn dGeomCopyOffsetRotation(geom: dGeomID, R: dMatrix3) -> ();
    pub fn dGeomGetOffsetQuaternion(geom: dGeomID, result: dQuaternion) -> ();
    pub fn dCollide(o1: dGeomID, o2: dGeomID, flags: ::libc::c_int,
                    contact: *mut dContactGeom, skip: ::libc::c_int)
     -> ::libc::c_int;
    pub fn dSpaceCollide(space: dSpaceID, data: *mut ::libc::c_void,
                         callback:
                             *mut ::std::option::Option<extern "C" fn()
                                                            -> ()>) -> ();
    pub fn dSpaceCollide2(space1: dGeomID, space2: dGeomID,
                          data: *mut ::libc::c_void,
                          callback:
                              *mut ::std::option::Option<extern "C" fn()
                                                             -> ()>) -> ();
    pub fn dCreateSphere(space: dSpaceID, radius: dReal) -> dGeomID;
    pub fn dGeomSphereSetRadius(sphere: dGeomID, radius: dReal) -> ();
    pub fn dGeomSphereGetRadius(sphere: dGeomID) -> dReal;
    pub fn dGeomSpherePointDepth(sphere: dGeomID, x: dReal, y: dReal,
                                 z: dReal) -> dReal;
    pub fn dCreateConvex(space: dSpaceID, _planes: *mut dReal,
                         _planecount: ::libc::c_uint, _points: *mut dReal,
                         _pointcount: ::libc::c_uint,
                         _polygons: *mut ::libc::c_uint) -> dGeomID;
    pub fn dGeomSetConvex(g: dGeomID, _planes: *mut dReal,
                          _count: ::libc::c_uint, _points: *mut dReal,
                          _pointcount: ::libc::c_uint,
                          _polygons: *mut ::libc::c_uint) -> ();
    pub fn dCreateBox(space: dSpaceID, lx: dReal, ly: dReal, lz: dReal)
     -> dGeomID;
    pub fn dGeomBoxSetLengths(_box: dGeomID, lx: dReal, ly: dReal, lz: dReal)
     -> ();
    pub fn dGeomBoxGetLengths(_box: dGeomID, result: dVector3) -> ();
    pub fn dGeomBoxPointDepth(_box: dGeomID, x: dReal, y: dReal, z: dReal)
     -> dReal;
    pub fn dCreatePlane(space: dSpaceID, a: dReal, b: dReal, c: dReal,
                        d: dReal) -> dGeomID;
    pub fn dGeomPlaneSetParams(plane: dGeomID, a: dReal, b: dReal, c: dReal,
                               d: dReal) -> ();
    pub fn dGeomPlaneGetParams(plane: dGeomID, result: dVector4) -> ();
    pub fn dGeomPlanePointDepth(plane: dGeomID, x: dReal, y: dReal, z: dReal)
     -> dReal;
    pub fn dCreateCapsule(space: dSpaceID, radius: dReal, length: dReal)
     -> dGeomID;
    pub fn dGeomCapsuleSetParams(ccylinder: dGeomID, radius: dReal,
                                 length: dReal) -> ();
    pub fn dGeomCapsuleGetParams(ccylinder: dGeomID, radius: *mut dReal,
                                 length: *mut dReal) -> ();
    pub fn dGeomCapsulePointDepth(ccylinder: dGeomID, x: dReal, y: dReal,
                                  z: dReal) -> dReal;
    pub fn dCreateCylinder(space: dSpaceID, radius: dReal, length: dReal)
     -> dGeomID;
    pub fn dGeomCylinderSetParams(cylinder: dGeomID, radius: dReal,
                                  length: dReal) -> ();
    pub fn dGeomCylinderGetParams(cylinder: dGeomID, radius: *mut dReal,
                                  length: *mut dReal) -> ();
    pub fn dCreateRay(space: dSpaceID, length: dReal) -> dGeomID;
    pub fn dGeomRaySetLength(ray: dGeomID, length: dReal) -> ();
    pub fn dGeomRayGetLength(ray: dGeomID) -> dReal;
    pub fn dGeomRaySet(ray: dGeomID, px: dReal, py: dReal, pz: dReal,
                       dx: dReal, dy: dReal, dz: dReal) -> ();
    pub fn dGeomRayGet(ray: dGeomID, start: dVector3, dir: dVector3) -> ();
    pub fn dGeomRaySetParams(g: dGeomID, FirstContact: ::libc::c_int,
                             BackfaceCull: ::libc::c_int) -> ();
    pub fn dGeomRayGetParams(g: dGeomID, FirstContact: *mut ::libc::c_int,
                             BackfaceCull: *mut ::libc::c_int) -> ();
    pub fn dGeomRaySetClosestHit(g: dGeomID, closestHit: ::libc::c_int) -> ();
    pub fn dGeomRayGetClosestHit(g: dGeomID) -> ::libc::c_int;
    pub fn dGeomTriMeshDataCreate() -> dTriMeshDataID;
    pub fn dGeomTriMeshDataDestroy(g: dTriMeshDataID) -> ();
    pub fn dGeomTriMeshDataSet(g: dTriMeshDataID, data_id: ::libc::c_int,
                               in_data: *mut ::libc::c_void) -> ();
    pub fn dGeomTriMeshDataGet(g: dTriMeshDataID, data_id: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn dGeomTriMeshSetLastTransform(g: dGeomID, last_trans: dMatrix4)
     -> ();
    pub fn dGeomTriMeshGetLastTransform(g: dGeomID) -> *mut dReal;
    pub fn dGeomTriMeshDataBuildSingle(g: dTriMeshDataID,
                                       Vertices: *const ::libc::c_void,
                                       VertexStride: ::libc::c_int,
                                       VertexCount: ::libc::c_int,
                                       Indices: *const ::libc::c_void,
                                       IndexCount: ::libc::c_int,
                                       TriStride: ::libc::c_int) -> ();
    pub fn dGeomTriMeshDataBuildSingle1(g: dTriMeshDataID,
                                        Vertices: *const ::libc::c_void,
                                        VertexStride: ::libc::c_int,
                                        VertexCount: ::libc::c_int,
                                        Indices: *const ::libc::c_void,
                                        IndexCount: ::libc::c_int,
                                        TriStride: ::libc::c_int,
                                        Normals: *const ::libc::c_void) -> ();
    pub fn dGeomTriMeshDataBuildDouble(g: dTriMeshDataID,
                                       Vertices: *const ::libc::c_void,
                                       VertexStride: ::libc::c_int,
                                       VertexCount: ::libc::c_int,
                                       Indices: *const ::libc::c_void,
                                       IndexCount: ::libc::c_int,
                                       TriStride: ::libc::c_int) -> ();
    pub fn dGeomTriMeshDataBuildDouble1(g: dTriMeshDataID,
                                        Vertices: *const ::libc::c_void,
                                        VertexStride: ::libc::c_int,
                                        VertexCount: ::libc::c_int,
                                        Indices: *const ::libc::c_void,
                                        IndexCount: ::libc::c_int,
                                        TriStride: ::libc::c_int,
                                        Normals: *const ::libc::c_void) -> ();
    pub fn dGeomTriMeshDataBuildSimple(g: dTriMeshDataID,
                                       Vertices: *const dReal,
                                       VertexCount: ::libc::c_int,
                                       Indices: *const dTriIndex,
                                       IndexCount: ::libc::c_int) -> ();
    pub fn dGeomTriMeshDataBuildSimple1(g: dTriMeshDataID,
                                        Vertices: *const dReal,
                                        VertexCount: ::libc::c_int,
                                        Indices: *const dTriIndex,
                                        IndexCount: ::libc::c_int,
                                        Normals: *const ::libc::c_int) -> ();
    pub fn dGeomTriMeshDataPreprocess(g: dTriMeshDataID) -> ();
    pub fn dGeomTriMeshDataGetBuffer(g: dTriMeshDataID,
                                     buf: *mut *mut ::libc::c_uchar,
                                     bufLen: *mut ::libc::c_int) -> ();
    pub fn dGeomTriMeshDataSetBuffer(g: dTriMeshDataID,
                                     buf: *mut ::libc::c_uchar) -> ();
    pub fn dGeomTriMeshSetCallback(g: dGeomID,
                                   Callback:
                                       *mut ::std::option::Option<extern "C" fn()
                                                                      ->
                                                                          ::libc::c_int>)
     -> ();
    pub fn dGeomTriMeshGetCallback(g: dGeomID)
     ->
         *mut ::std::option::Option<extern "C" fn(g: dGeomID)
                                        -> ::libc::c_int>;
    pub fn dGeomTriMeshSetArrayCallback(g: dGeomID,
                                        ArrayCallback:
                                            *mut ::std::option::Option<extern "C" fn()
                                                                           ->
                                                                               ()>)
     -> ();
    pub fn dGeomTriMeshGetArrayCallback(g: dGeomID)
     -> *mut ::std::option::Option<extern "C" fn(g: dGeomID) -> ()>;
    pub fn dGeomTriMeshSetRayCallback(g: dGeomID,
                                      Callback:
                                          *mut ::std::option::Option<extern "C" fn()
                                                                         ->
                                                                             ::libc::c_int>)
     -> ();
    pub fn dGeomTriMeshGetRayCallback(g: dGeomID)
     ->
         *mut ::std::option::Option<extern "C" fn(g: dGeomID)
                                        -> ::libc::c_int>;
    pub fn dGeomTriMeshSetTriMergeCallback(g: dGeomID,
                                           Callback:
                                               *mut ::std::option::Option<extern "C" fn()
                                                                              ->
                                                                                  ::libc::c_int>)
     -> ();
    pub fn dGeomTriMeshGetTriMergeCallback(g: dGeomID)
     ->
         *mut ::std::option::Option<extern "C" fn(g: dGeomID)
                                        -> ::libc::c_int>;
    pub fn dCreateTriMesh(space: dSpaceID, Data: dTriMeshDataID,
                          Callback:
                              *mut ::std::option::Option<extern "C" fn()
                                                             ->
                                                                 ::libc::c_int>,
                          ArrayCallback:
                              *mut ::std::option::Option<extern "C" fn()
                                                             -> ()>,
                          RayCallback:
                              *mut ::std::option::Option<extern "C" fn()
                                                             ->
                                                                 ::libc::c_int>)
     -> dGeomID;
    pub fn dGeomTriMeshSetData(g: dGeomID, Data: dTriMeshDataID) -> ();
    pub fn dGeomTriMeshGetData(g: dGeomID) -> dTriMeshDataID;
    pub fn dGeomTriMeshEnableTC(g: dGeomID, geomClass: ::libc::c_int,
                                enable: ::libc::c_int) -> ();
    pub fn dGeomTriMeshIsTCEnabled(g: dGeomID, geomClass: ::libc::c_int)
     -> ::libc::c_int;
    pub fn dGeomTriMeshClearTCCache(g: dGeomID) -> ();
    pub fn dGeomTriMeshGetTriMeshDataID(g: dGeomID) -> dTriMeshDataID;
    pub fn dGeomTriMeshGetTriangle(g: dGeomID, Index: ::libc::c_int,
                                   v0: *mut dVector3, v1: *mut dVector3,
                                   v2: *mut dVector3) -> ();
    pub fn dGeomTriMeshGetPoint(g: dGeomID, Index: ::libc::c_int, u: dReal,
                                v: dReal, Out: dVector3) -> ();
    pub fn dGeomTriMeshGetTriangleCount(g: dGeomID) -> ::libc::c_int;
    pub fn dGeomTriMeshDataUpdate(g: dTriMeshDataID) -> ();
    pub fn dCreateGeomTransform(space: dSpaceID) -> dGeomID;
    pub fn dGeomTransformSetGeom(g: dGeomID, obj: dGeomID) -> ();
    pub fn dGeomTransformGetGeom(g: dGeomID) -> dGeomID;
    pub fn dGeomTransformSetCleanup(g: dGeomID, mode: ::libc::c_int) -> ();
    pub fn dGeomTransformGetCleanup(g: dGeomID) -> ::libc::c_int;
    pub fn dGeomTransformSetInfo(g: dGeomID, mode: ::libc::c_int) -> ();
    pub fn dGeomTransformGetInfo(g: dGeomID) -> ::libc::c_int;
    pub fn dCreateHeightfield(space: dSpaceID, data: dHeightfieldDataID,
                              bPlaceable: ::libc::c_int) -> dGeomID;
    pub fn dGeomHeightfieldDataCreate() -> dHeightfieldDataID;
    pub fn dGeomHeightfieldDataDestroy(d: dHeightfieldDataID) -> ();
    pub fn dGeomHeightfieldDataBuildCallback(d: dHeightfieldDataID,
                                             pUserData: *mut ::libc::c_void,
                                             pCallback:
                                                 *mut ::std::option::Option<extern "C" fn()
                                                                                ->
                                                                                    dReal>,
                                             width: dReal, depth: dReal,
                                             widthSamples: ::libc::c_int,
                                             depthSamples: ::libc::c_int,
                                             scale: dReal, offset: dReal,
                                             thickness: dReal,
                                             bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildByte(d: dHeightfieldDataID,
                                         pHeightData: *const ::libc::c_uchar,
                                         bCopyHeightData: ::libc::c_int,
                                         width: dReal, depth: dReal,
                                         widthSamples: ::libc::c_int,
                                         depthSamples: ::libc::c_int,
                                         scale: dReal, offset: dReal,
                                         thickness: dReal,
                                         bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildShort(d: dHeightfieldDataID,
                                          pHeightData: *const ::libc::c_short,
                                          bCopyHeightData: ::libc::c_int,
                                          width: dReal, depth: dReal,
                                          widthSamples: ::libc::c_int,
                                          depthSamples: ::libc::c_int,
                                          scale: dReal, offset: dReal,
                                          thickness: dReal,
                                          bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildSingle(d: dHeightfieldDataID,
                                           pHeightData:
                                               *const ::libc::c_float,
                                           bCopyHeightData: ::libc::c_int,
                                           width: dReal, depth: dReal,
                                           widthSamples: ::libc::c_int,
                                           depthSamples: ::libc::c_int,
                                           scale: dReal, offset: dReal,
                                           thickness: dReal,
                                           bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataBuildDouble(d: dHeightfieldDataID,
                                           pHeightData:
                                               *const ::libc::c_double,
                                           bCopyHeightData: ::libc::c_int,
                                           width: dReal, depth: dReal,
                                           widthSamples: ::libc::c_int,
                                           depthSamples: ::libc::c_int,
                                           scale: dReal, offset: dReal,
                                           thickness: dReal,
                                           bWrap: ::libc::c_int) -> ();
    pub fn dGeomHeightfieldDataSetBounds(d: dHeightfieldDataID,
                                         minHeight: dReal, maxHeight: dReal)
     -> ();
    pub fn dGeomHeightfieldSetHeightfieldData(g: dGeomID,
                                              d: dHeightfieldDataID) -> ();
    pub fn dGeomHeightfieldGetHeightfieldData(g: dGeomID)
     -> dHeightfieldDataID;
    pub fn dClosestLineSegmentPoints(a1: dVector3, a2: dVector3, b1: dVector3,
                                     b2: dVector3, cp1: dVector3,
                                     cp2: dVector3) -> ();
    pub fn dBoxTouchesBox(_p1: dVector3, R1: dMatrix3, side1: dVector3,
                          _p2: dVector3, R2: dMatrix3, side2: dVector3)
     -> ::libc::c_int;
    pub fn dBoxBox(p1: dVector3, R1: dMatrix3, side1: dVector3, p2: dVector3,
                   R2: dMatrix3, side2: dVector3, normal: dVector3,
                   depth: *mut dReal, return_code: *mut ::libc::c_int,
                   flags: ::libc::c_int, contact: *mut dContactGeom,
                   skip: ::libc::c_int) -> ::libc::c_int;
    pub fn dInfiniteAABB(geom: dGeomID, aabb: *mut dReal) -> ();
    pub fn dCreateGeomClass(classptr: *const dGeomClass) -> ::libc::c_int;
    pub fn dGeomGetClassData(arg1: dGeomID) -> *mut ::libc::c_void;
    pub fn dCreateGeom(classnum: ::libc::c_int) -> dGeomID;
    pub fn dSetColliderOverride(i: ::libc::c_int, j: ::libc::c_int,
                                _fn:
                                    *mut ::std::option::Option<extern "C" fn()
                                                                   ->
                                                                       ::libc::c_int>)
     -> ();
    pub fn dWorldExportDIF(w: dWorldID, file: *mut FILE,
                           world_name: *const ::libc::c_char) -> ();
}
